% \iffalse meta-comment
%
% Copyright (C) 2021–2024 Marei Peischl <marei@peitex.de>
% ---------------------------------------------------------
%
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3c
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3c or later is part of all distributions of LaTeX
% version 2008-05-04 or later.
%
% \fi
% \iffalse
%<*driver>
\ProvidesFile{zugferd.dtx}[2024-08-22 v0.4 ZUGFerd Invoice and Faktur-X]
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[2023-11-01]
%<package>\ProvidesExplPackage{zugferd}{2024-08-22}{0.4}{ZUGFerd Invoice and Faktur-X}
%<*driver>
\DocumentMetadata{pdfstandard=a-3b,lang=en}
\documentclass[lm-default=false]{l3doc}
\usepackage{zugferd}[2024-08-22]
\EnableCrossrefs
%\CodelineIndex
\RecordChanges
\usepackage{biblatex}
\ExplSyntaxOn
\tl_new:N  \l__ptxtools_doc_values_tl
\newcommand*{\codefamily}{\MacroFont}
\DeclareTextFontCommand{\codefont}{\codefamily}
\providecommand{\option}[1]{\codefont{#1}}

\cs_new:Npn \__ptxctools_parse_key_option:w #1 #2  #3 #4 = #5  \q_stop {
	\par
	\dim_compare:nNnF {\parskip} > {\c_zero_dim} {\medskip}
	\begingroup
	\let\PrintDescribeOption\PrintDescribeKeyOption
	\tl_set:Nn \l__ptxtools_doc_values_tl {\IfBooleanTF{#3}{\textsf{#5}}{\textsf{(#5)}}}
	\noindent\DescribeOption{#4}\hfill
			\IfBooleanTF{#1}
				{#2}
				{(default:~\codefont{#2})}\strut\par
	\endgroup
	\use:c {@afterheading}
}

\newcommand*{\PrintDescribeKeyOption}[1]{
	{\MacroFont #1=}\rlap{\hskip\marginparsep\l__ptxtools_doc_values_tl}
}

\NewDocumentCommand{\DescribeKeyOption}{smms}{
	\__ptxctools_parse_key_option:w  #1 {#3} #4 #2 \q_stop
}

\newenvironment{valuelist}
               {\list{}{\labelwidth0pt\itemindent0pt\leftmargin0pt
                        \let\makelabel\valuelistlabel}}
               {\endlist}
\newcommand*\valuelistlabel[1]{%\hspace\labelsep
                                \llap{\normalfont\codefamily\color_select:n {black!60} #1}
}
\ExplSyntaxOff

\usepackage{underscore-ltx}

\begin{filecontents}{zugferd.bib}
@online{x-rechnung,
	url={https://xeinkauf.de/dokumente/},
	urldate={2024-08-20}
}
@online{spec-xrechnung,
	url={https://xeinkauf.de/app/uploads/2024/07/302-XRechnung-2024-06-20.pdf},
	author={{Koodinierungsstelle für IT-Standards}},
	title={Spezifikation Standard XRechnung},
	subtitle={CIUS und Extension},
	edition={Version XRechnung 3.0.2},
	date={2024-06-20},
	urldate={2024-08-20},
	langid={german}
}
@online{mustang-project,
	title={Mustangproject},
	url={https://github.com/ZUGFeRD/mustangproject},
	urldate={2024-08-20}
}
@online{country-codes,
	title={ECE/TRADE/201},
	subtitle={ISO COUNTRY CODE for Representation of Names of Countries},
	url={https://unece.org/trade/documents/iso-country-code-representation-names-countries},
	urldate={2024-08-20},
}
@online{unit-codes,
	title={Rec 20 – Codes for Units of Measure Used in International Trade},
	url={https://unece.org/sites/default/files/2023-10/rec20_Rev17e-2021.xlsx},
	urldate={2024-08-20},
	note={Link directory to xlsx. All Revisions can be found in \cite{cl-recommendations}.}
}
@online{cl-recommendations,
	author={United Nations Economic Commission for Europe (UNECE)}},
	title={Code List Recommendations},
	url={https://unece.org/trade/uncefact/cl-recommendations},
	urldate={2024-08-20}
}
@online{VAT-exemption-codes,
	title={VAT exemption reason code list},
	url={https://www.xrepository.de/details/urn:xoev-de:kosit:codeliste:vatex_1},
	urldate={2024-08-20}
}
\end{filecontents}
\addbibresource{zugferd.bib}
\begin{document}
  \EnableDocumentation\DisableImplementation
  \DocInput{zugferd.dtx}
  %\DisableDocumentation\EnableImplementation
  %\DocInputAgain
  \PrintChanges
  \PrintIndex
  \printbibliography
\end{document}
%</driver>
% \fi
%
% \changes{v1.0}{2024/01/30}{Initial public version}
%
% \GetFileInfo{zugferd.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment,\today}
% \begin{documentation}
% \title{The \textsf{zugferd} package\thanks{This document
%   corresponds to \textsf{zugferd}~\fileversion, dated \filedate.}}
% \author{Marei Peischl \\ \texttt{marei@peitex.de}}
%
% \maketitle
%
% \begin{abstract}
% Invoicing is getting more and more automated. Starting with public sector there already is a requirement to stick to the Faktur-X Standard.
% First Invoices based on the Implementation here have been created back in 2021.
% And this is now the trial to create a more universal and public package to support the current Version of ZUGFeRD and therefore also X-Rechung and Faktur-X.
%
% \indent The basis idea of this package was to use the calculation within \LaTeX as well. So it also creates the XML file for the attachment on the fly.
% To match typical setups there is a wrapper package which usually would also hold the personal Invoicing layout configuration.
% \end{abstract}
%
% \section*{Sponsors \& Supporters}
% Most of this package has been created within my free time and for my personal use. At start it was not a paid project at all.
% Since it is addressing business users it would be great if we could keep this actively maintained.
% If you are able to support this either financially for the maintenance effort, a custom extension, I'd love to hear from you.
%
% Currently this project is financially supported by:
% \begin{itemize}
% \item Pengutronix e.K., \url{https://pengutronix}\newline
% Special thanks to them, as they also sponsored the minimal portable \TeX{} Live setup.
% \end{itemize}
%
% \tableofcontents
%
% \section{Quickstart}
% First of all: This package is still in development and does not provide any validation.
% To ensure your invoice is created correctly you should also validate the output files.
% There are tools like the \citeauthor{mustang-project} \cite{mustang-project} providing an easy to use interface for the valudation.
% In the appendix I will add some notes on my setup and how I use it within pipelines.
%
% The Bundle provides an example file called \file{DEMO-rechnung-zugferd.tex}.
% This includes a basic setup for a valid X-Rechnung currently matching Version 3.0.1 of the standard.
% Details on the requirements can be found in the documentation at \cite{x-rechnung}.
%
% The included package \pkg{zugferd-invoice} is an example project which might match your own invoicing structure.
% It hold all the layout information which is static accross all the invoices.
% The idea is to create your own version of this package to use your own layout and internally load the zugferd package that way.
%
% \end{documentation}
% \iffalse
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
% \fi
% \begin{implementation}
% \section{Implementation}

%    \begin{macrocode}
%<@@=zugferd>
%    \end{macrocode}
% \begin{variable}{\l_@@_tmp_tl,\g_@@_format_str,\g_@@_businessProcessId_str,\g_@@_writeTradeContact_bool,\g_@@_writePaymentMeans_bool,\g_@@_conformance_level_str}
%    \begin{macrocode}
\tl_new:N \l_@@_tmp_tl
\str_new:N \g_@@_format_str
\str_new:N \g_@@_businessProcessId_str
\bool_new:N \g_@@_writeTradeContact_bool
\bool_new:N \g_@@_writePaymentMeans_bool
\str_new:N \g_@@_conformance_level_str
%    \end{macrocode}
% \end{variable}
% \end{implementation}
% \begin{documentation}
% \section{Package Options}
% The package supports a few fundamental settings.
% These have to be set when the package is loaded as they are used internally to setup the scheme or activate the xml mechanism.
%
%  \DescribeKeyOption{format=xrechnung/xrechung3.0/xrechnung2.3/basic}{xrechung}
% \option{format} selects the scheme to be used for the zugferd invoice.
% Currently xrechung3.0, xrechnung2.3 and the basic scheme are supported.
%
% The value |xrechnung| is set as an alias to |xrechnung3.0| and will always use the latest version supported by \pkg{zugferd}.
%
% \DescribeKeyOption{zugferd=\meta{boolean}}{true}*
% This option can be used to deactivate the xml embedding.
% It would also disable the the \option{write-xml} option.
% This can be used to create a package which can use the same structure to also create invoices without XML attachment.
% It can also be used with older \LaTeX{} releases than this package requires.
% There will be a warning, but the visible part should be okay.
%
% \DescribeKeyOption{write-xml=\meta{boolean}}{true}*
% Disable the xml output.
% This can be used if you want to create the xml attachment with different software than this package.
%
% In that case you can either rename your file to \meta{\cs[no-index]{jobname}\_zugferd.xml} or also adjust the \option{xml-file} option.
%
% \DescribeKeyOption{xml-file=\meta{filename}}{\cs[no-index]{jobname}_zugferd.xml}*
% Adjust the file name of the created or loaded xml file.
%
% The option \option{xrechnung} is only used internally to set the global parameters for all |xrechnung| variants.
% \end{documentation}
% \begin{implementation}
% \begin{optionenv}{format,xrechnung,write-xml,zugferd,xml-file}
%    \begin{macrocode}
\char_set_catcode_other:N \#%
\keys_define:nn {zugferd} {
	xrechnung .code:n = {\bool_gset_true:N \g_@@_writeTradeContact_bool\bool_gset_true:N \g_@@_writePaymentMeans_bool\str_gset:Nn \g_@@_conformance_level_str {XRECHNUNG}},
	format .choice:,
	format / xrechnung3.0 .code:n = {
		\str_gset:Nx \g_@@_format_str {urn:cen.eu:en16931:2017#compliant#urn:xeinkauf.de:kosit:xrechnung_3.0}
		\str_gset:Nx \g_@@_businessProcessId_str {urn:fdc:peppol.eu:2017:poacc:billing:01:1.0}
		\keys_set:nn {zugferd}{xrechnung}
	},
	format / xrechnung2.3 .code:n = {
		\str_gset:Nx \g_@@_format_str {urn:cen.eu:en16931:2017#compliant#urn:xoev-de:kosit:standard:xrechnung_2.3}
		\keys_set:nn {zugferd}{xrechnung}
	},
	format  / basic .code:n = {
		\str_gset:Nx \g_@@_format_str {urn:cen.eu:en16931:2017#compliant#urn:factur-x.eu:1p0:basic}
		\bool_gset_false:N \g_@@_writeTradeContact_bool
		\bool_gset_false:N \g_@@_writePaymentMeans_bool
		\str_gset:Nn \g_@@_conformance_level_str {BASIC}
	},
	format / xrechnung .meta:n = { format = xrechnung3.0 },
	format .initial:n = xrechnung,
	format .usage:n = load,
	write-xml .bool_gset:N = \g_@@_write_xml_bool,
	write-xml .initial:n = true,
	write-xml .usage:n = load,
	zugferd .bool_gset:N = \g_@@_active_bool,
	zugferd .initial:n = true,
	zugferd .default:n = true,
	zugferd .usage:n = load,
	ZUGFerD .meta:n = {zugferd = #1},
	xml-file .tl_gset:N = \g_@@_xml_file_tl,
	xml-file .initial:n = \jobname _zugferd.xml,
	xml-file .usage:n = load,
}
\char_set_catcode_parameter:N \#%

\ProcessKeyOptions[zugferd]
%    \end{macrocode}
% \end{optionenv}
% \subsection{Preparation to write the xml file}
% \begin{variable}{\_@@_xml_writer_iow}
%    \begin{macrocode}
\iow_new:N \_@@_xml_writer_iow
%    \end{macrocode}
% \end{variable}
% To adjust the metadata it is necessary to use the \pkg{pdfmanagement-testphase} by \citeauthor{pdfmanagement-testphase}.
% She had prepared some experiment files for the PDF attachment in the experiments of the repository.
% We use these to embed the XML file.
%
% This part prepares the XMP metadata according to the required scheme.
%    \begin{macrocode}
\bool_if:NT \g_@@_active_bool {
\cs_if_exist:NF \pdfmeta_xmp_xmlns_new:nn {
	\msg_new:nnnn {zugferd} {PDFmanagement-not-active} {
		The~\LaTeX~PDF~management~is~not~active.~Activate~it~using~\string\DocumentMetadata.
	} {
		See~ZUGFeRD~or~PDFmanagement~documentation~for~more~information.
	}
	\msg_error:nn{zugferd} {PDFmanagement-not-active}
}
%% based on experiments for l3pdfmeta by Ulrike Fischer
\pdfmeta_xmp_xmlns_new:nn {fx}{urn:factur-x:pdfa:CrossIndustryDocument:invoice:1p0\c_hash_str}

\cs_generate_variant:Nn \__pdfmeta_xmp_schema_new:nnn {nne}


	\__pdfmeta_xmp_schema_new:nne
		  {Factur-X~PDFA~Extension~Schema}
		  {fx}
		  {urn:factur-x:pdfa:CrossIndustryDocument:invoice:1p0\c_hash_str}

	\__pdfmeta_xmp_property_new:nnnnn
		  {fx}
		  {DocumentFileName}
		  {Text}
		  {external}
		  {name~of~the~embedded~XML~invoice~file}

	\__pdfmeta_xmp_property_new:nnnnn
		  {fx}
		  {DocumentType}
		  {Text}
		  {external}
		  {INVOICE}

	\__pdfmeta_xmp_property_new:nnnnn
		  {fx}
		  {Version}
		  {Text}
		  {external}
		  {The~actual~version~of~the~factur-x~schema}

	\__pdfmeta_xmp_property_new:nnnnn
		  {fx}
		  {ConformanceLevel}
		  {Text}
		  {external}
		  {The~conformance~level~of~the~factur-x~data}

	\exp_args:Ne \pdfmeta_xmp_add:n {
		% fix INVOICE
		<fx:DocumentType>INVOICE</fx:DocumentType>\iow_newline:
		% fix factur-x.xml
		<fx:DocumentFileName>factur-x.xml</fx:DocumentFileName>\iow_newline:
		% fix schema version
		<fx:Version>1.0</fx:Version>\iow_newline:
		% variable (zulässige Werte MINIMUM, BASIC WL, BASIC, EN 16931, EXTENDED, XRECHNUNG)
		<fx:ConformanceLevel>\g_@@_conformance_level_str</fx:ConformanceLevel>\iow_newline:
		%
	 }
}
%    \end{macrocode}
% \end{implementation}
% \begin{documentation}
% \section{User Commands}
% The end user is only asked to set or access the data to be used by \pkg{zugferd}.
%
% \begin{syntax}
% \cs[no-index]{SetZUGFeRDData}*\marg{key value list}
% \end{syntax}
% \DescribeMacro{\SetZUGFeRDData}
% \DescribeMacro[noindex]{\SetZugferdData}
% The two modes of \cs[no-index]{SetZUGFeRDData} control if the argument is expanded before the fields are set.
% Depending on the source of the data this might be necessary.
% Fields which are involved in the calculation will be expanded anyway, but the text fields will not, to support special characters.
%
% \end{documentation}
% \begin{implementation}
% \begin{function}{\SetZUGFeRDData}
%    \begin{macrocode}
\NewDocumentCommand{\SetZUGFeRDData}{sm}{
	\IfBooleanTF{#1}{\keys_set:ne}{\keys_set:nn}
		{zugferd} {#2}
}
\let\SetZugferdData\SetZUGFeRDData
%    \end{macrocode}
% \end{function}
% \end{implementation}
%
% \begin{documentation}
%
% \DescribeMacro{\InsertZUGFeRDData}
% \DescribeMacro[noindex]{\InsertZugferdData}
% \begin{syntax}
% \cs[no-index]{insertZugferdData}\oarg{special mode option}\marg{data-selection}
% \end{syntax}
% ZUGFerd uses the same data as the XML inside the PDF.
% To simplify the reuse of data this command is designed to simplify the access to data fields, for example:
%
% \begin{verbatim}
% \InsertZUGFeRDData{id}
% {\InsertZUGFeRDData[set-today]{date}\today}
% \InsertZUGFeRDData[AddressData]{seller}
% \end{verbatim}
% As special modes the command currently supports the following:
%
% By default \pkg{zugferd} tries to find the variable holding the data itself.
% First a token list is tried, afterwards a string.
% Global variables are prefered over local ones.
%
% As the variable names may container underscores and the option usually prefers dashes, dashes are converted to underscores for the detection.
%
% \DescribeOption{AddressData} Allows |seller| or |buyer| for the data selection.
% Will print the address, to be used in letters.
%
% \DescribeOption{set-today}
% For dates there also exists the variant which will not print the variable but parse the variable to be used as \cs{today}.
% Using this the date format can be controlled easier using the language setting of the document.
% Here you should take care to use it within a group to restore the real value of \cs{today} afterwards.
%
% \end{documentation}
% \begin{implementation}
% \begin{function}{\InsertZUGFeRDData,\InsertZugferdData}
% To simplify the usage in letters we also add fields to be able to use the zugferd data within \LaTeX{} output.
% Country is still missing.
%    \begin{macrocode}
\NewDocumentCommand{\InsertZUGFeRDData}{om}{
	\str_case:nnF {#1} {
%    \end{macrocode}
%    \begin{macrocode}
		{AddressData} {
			\clist_map_inline:nn {name, lineone, linetwo} {
				\prop_if_in:cnT  {g_@@_#2_AddressData_prop } {##1} {
					\prop_item:cn {g_@@_#2_AddressData_prop } {##1}\\
				}
			}
			\prop_item:cn {g_@@_#2_AddressData_prop } {postcode}
			\space
			\prop_item:cn {g_@@_#2_AddressData_prop } {city}
		}
%    \end{macrocode}
%    \begin{macrocode}
	   {set-today} {
			\_@@_set_today:v {g_@@_#2_tl}
	   }
	} {
%    \end{macrocode}
% Try to find the variable automatially.
% \begin{itemize}
%		\item replace dashes by underscores
%		\item try if a tokenlist or a string
%		\item prefer global over local
%		\item take the first existing variable and break the loop
% \end{itemize}
%    \begin{macrocode}
		\str_set:Ne \l_tmpa_str {#2}
		\str_replace_all:Nnn \l_tmpa_str {-} {_}
		\bool_set_true:N  \g_tmpa_bool
		\clist_map_inline:nn {tl, str} {
			\clist_map_inline:nn {g, l} {
				\use:c {##1 _if_exist:cT} {####1_@@_ \l_tmpa_str _##1}
					{ \use:c {####1_@@_ \l_tmpa_str _##1} \bool_gset_false:N \g_tmpa_bool}
				\bool_if:NF  \g_tmpa_bool {\clist_map_break:}
			}
			\bool_if:NF  \g_tmpa_bool {\clist_map_break:}
		}
	}
}
\providecommand{\InsertZugferdData}{\InsertZUGFeRDData}
\providecommand{\insertZugferdData}{\InsertZUGFeRDData}
%    \end{macrocode}
% \begin{function}{\_@@_set_today:c}
% Auxiliary function to use a date variable within the current group to be used as \cs{today}.
%    \begin{macrocode}
\cs_new:Nn \_@@_set_today:n {
	\_@@_set_today_aux:w #1 \q_stop
}
\cs_generate_variant:Nn \_@@_set_today:n  {v}
\cs_new:Npn \_@@_set_today_aux:w #1 #2 #3 #4 #5 #6 #7 #8 \q_stop{
	\int_set:Nn \year {#1#2#3#4}
	\int_set:Nn \month {#5#6}
	\int_set:Nn \day {#7#8}
}
%    \end{macrocode}
% \end{function}
% \end{function}
% \end{implementation}
% \begin{documentation}
% \section{Developer Commands}
% \DescribeMacro{\startWritingZUGFeRDxml}
% \cs[no-index]{startWritingZUGFeRDxml} is opening the output stream for the XML file.
% It also adjusts the indentation.
% If \option{write-xml} is false, this option only opens a group to achieve the same structure in both modes.
%
% \DescribeMacro{\stopWritingZUGFeRDxml}
% Here the output stream is closed and the xml file is attached.
% In case \option{write-xml} is not active, the attachment will be made if that's not deactivated separately using \option{zugferd}.
% I also ends the group started by \cs[no-index]{startWritingZUGFeRDxml}.
% \end{documentation}
% \begin{implementation}
%    \begin{macrocode}
\newcommand*{\startWritingZUGFeRDxml}{
	\begingroup
	\bool_if:NTF \g_@@_write_xml_bool
		{
			\char_set_active_eq:nN {13} \_@@_xml_newline_indent:
			\iow_open:Nn  \_@@_xml_writer_iow {\g_@@_xml_file_tl}
		}{
			\msg_info:nn {zugferd} {no-xml-write}
		}
}
\msg_new:nnn {zugferd} {no-xml-write} {
	The~option~write-xml=false~was~set.\\
	Writing~of~XML~file~is~deactivated.
}
%    \end{macrocode}
% The PDF attachment is done after the writing stream is closed.
%    \begin{macrocode}
%% The metadata elements are taken by Ulrike Fischer's faktur-x experiments
%% https://github.com/latex3/pdfresources/tree/main/experiments/factur-x-bills
\newcommand*{\stopWritingZUGFeRDxml}{%
	\bool_if:NT \g_@@_write_xml_bool {\iow_close:N  \_@@_xml_writer_iow}%
	\endgroup
	\bool_if:NT  \g_@@_active_bool {
		\group_begin:
		\pdfdict_put:nnn {l_pdffile/Filespec} {AFRelationship}{/Alternative}
		%or /Source in some cases
		\pdfdict_put:nnn {l_pdffile/Filespec} {Desc}{(Factur-X/ZUGFeRD-Rechnung)}
		\pdffile_embed_file:nnn {\g_@@_xml_file_tl}{factur-x.xml}{zugferd/rechnung}
		\group_end:
		\pdfmanagement_add:nnx
			  {Catalog/Names}
			  {EmbeddedFiles}
			  {\pdf_object_ref:n{zugferd/rechnung}}
			% steht in der docu ist aber pdf 2.0 ....
		\pdfmanagement_add:nnx{Catalog}{AF}{\pdf_object_ref:n{zugferd/rechnung}}
	}
}
%    \end{macrocode}
% \begin{function}{\_@@_write_xml:n,\_@@_define_xml_writing_macro:Nn,\_@@_define_xml_content_macro:Nn}
% These commands are used to toggle the writing of the xml file. This corresponds to the option \option{write-xml}.
%    \begin{macrocode}
\bool_if:NTF \g_@@_write_xml_bool {
	\cs_new:Nn \_@@_write_xml:n {
		\tl_if_head_eq_charcode:nNTF {#1} \^^M {
			\iow_now:Nn \_@@_xml_writer_iow {#1}
		} {
			\iow_now:Ne \_@@_xml_writer_iow {\_@@_xml_auto_indent: \exp_not:n {#1}}
		}
	}
	\cs_new_eq:NN \_@@_define_xml_writing_macro:Nn  \cs_new:Nn
	\cs_new_eq:NN \_@@_define_xml_content_macro:Nn  \cs_new:Nn
} {
	\cs_set_eq:NN \_@@_write_xml:n \use_none:n
	\cs_new:Nn \_@@_define_xml_writing_macro:Nn {\cs_new:Nn #1{} \use_none:n {#2}}
	\cs_seq_eq:NN \_@@_define_xml_content_macro:Nn \use_none:n
}

\cs_generate_variant:Nn \_@@_write_xml:n {e}
%    \end{macrocode}
% \end{function}
% \subsection{Numer rounding}
% As \pkg{siunitx} is implementing this, we use it instead of building our own mechanism.
%    \begin{macrocode}
\RequirePackage{siunitx}
%    \end{macrocode}
% \begin{function}{\_@@_number_format:nNn,\_@@__write_xml_number_round:nnnn,\_@@__write_xml_number_round:nnn}
%    \begin{macrocode}
\cs_new:Nn \_@@_number_format:nNn {
	\sisetup{
		parse-numbers=true,
		round-mode=places,
		round-precision=#1,
		round-pad = false,
		group-digits=false,
		minimum-decimal-digits=#1,
		output-decimal-marker=.
	}
	\siunitx_number_format:nN {#3} #2
}

\cs_generate_variant:Nn  \_@@_number_format:nNn  {nNe}
%    \end{macrocode}
%    \begin{macrocode}
\cs_new:Nn \_@@__write_xml_number_round:nnnn {
	\_@@_number_format:nNe {#1} \l_@@_tmp_tl {#4}
	\_@@_write_xml:e {<ram:#2#3>\l_@@_tmp_tl</ram:#2>}
}
%    \end{macrocode}
%    \begin{macrocode}
\cs_new:Nn \_@@__write_xml_number_round:nnn {
	 \_@@__write_xml_number_round:nnnn {#1} {#2} {} {#3}
}
%    \end{macrocode}
% \end{function}
% \subsection{XML indentation}
% The indentation of the XML does not really matter.
% For debugging it's a lot simpler to have it included and this also helped maintaining the structure of the code during development, so I decided to keep it.
% The indentation is created using s bunch of auxiliary commands and variables which are defined here.
% \begin{variable}{\l_@@_xml_indent_int}
%    \begin{macrocode}
\int_new:N \l_@@_xml_indent_int
%    \end{macrocode}
% \end{variable}
% \begin{function}{\_@@_xml_indent:,\_@@_xml_auto_indent:,\_@@_xml_add_indent:,\_@@_xml_newline_indent: }
%    \begin{macrocode}
\cs_new:Nn \_@@_xml_indent: {
	\space\space
}
%    \end{macrocode}
%    \begin{macrocode}
\cs_new:Nn \_@@_xml_auto_indent: {
	\prg_replicate:nn {\l_@@_xml_indent_int} {\_@@_xml_indent:}
}
%    \end{macrocode}
%    \begin{macrocode}
\cs_new:Nn \_@@_xml_add_indent: {
	\prg_replicate:nn {\l_@@_xml_indent_int} {\_@@_xml_indent:}
	\space\space
}
%    \end{macrocode}
% \end{function}
% The idea was to redefine the \cs[no-index]{newlinechar} to automatically indent the following line.
%    \begin{macrocode}
\cs_new:Nn \_@@_xml_newline_indent: {\iow_newline: \_@@_xml_auto_indent:}
%    \end{macrocode}
% \end{implementation}
% \begin{documentation}
% \section{Local options/settings}
% This section is listing the options which may be changed per invoice item.
% It depends a bit on the business case if it's worth to define a global default.
% Generally these are assigned locally.
% \subsection{Units}
% \DescribeKeyOption*{unit=hour/day/one/piece/\meta{unit code}}{initially empty}
% The Faktur-X standard requires the unit to be selected.
% These are called \enquote{/UN/CEFACT Common Codes} and can be found withtin \cite{unit-codes}.
%
% Currently \pkg{zugferd} supports |hour| (|HUR|), |day| (|DAY|), |one| (C62) and |piece| (H87).
% For these the corresponding codes have been implemented within the package.
% Other units can be selected using the codes listed in \cite{unit-codes}.
%
% This option is not case sensitive
%  The value is automatically converted to uppercase.
% If the selected option is different from the predefined ones, there will be a warning, as \pkg{zugferd} does not know if the selection is valid or not.
% \begin{NOTE}
% additional source: http://www.unece.org/fileadmin/DAM/cefact/recommendations/rec20/rec20_Rev9e_2014.xls
% \end{NOTE}
% \end{documentation}
% \begin{implementation}
% \begin{optionenv}{unit}
%    \begin{macrocode}
\keys_define:nn { zugferd } {
	unit .choices:nn = {HUR,DAY,C62,H87} {
		\tl_set_eq:NN \l_@@_unit_code_tl \l_keys_choice_tl
	},
	unit / hour .meta:n = {unit=HUR},
	unit / day .meta:n = {unit=DAY},
	unit / one .meta:n= {unit= C62},
	unit / piece .meta:n = {unit=H87},
	% make selection case insensitive
	unit / unknown .code:n = {
		\exp_args:Nnnx \keys_if_choice_exist:nnnTF {zugferd} {unit} {\str_uppercase:f {#1}}
		{\keys_set:nx { zugferd } {unit= {\str_uppercase:f {#1}}}}
		{\msg_warning:nnn { zugferd } {unknown-unit} {#1}}
	},
	unit .usage:n = general,
}

\msg_new:nnnn {zugferd} {unknown-unit} {
	You~selected~a~unit~which~was~not~predefined.\\
	I~~will~directly~use~your~selection~'unit=#1'~as~Common~Code.
	Please~ensure~the~selection~is~valid!
} {
	For~more~information~see~the~zugferd~documentation and the /UN/CEFACT Common Code list.
}
%    \end{macrocode}
% \end{optionenv}
% \end{implementation}
% \begin{documentation}
% \subsection{Tax category codes}
% \DescribeKeyOption{tax/category=\meta{category code/alias}}{standard}*
% The Tax data requires a category code. For details have a look at the Specification \cite[e.\,g.][]{spec-xrechnung}.
% \pkg{zugferd} implements all of those, but the user has to take care to select the correct one for each invoice item.
% The example file includes 2 different VAT values using the same category.
%
% The labels have been chosen to simplify the usage. It's also possible to enter the codes directly.
% This option is not case sensitive.
% \begin{valuelist}
% \item[standard] Standard rate and reduced rate item, |category=S|
% \item[zero] Zero rated sale,  |category=Z|
% \item[exempt] Exempted from VAT. This requires a reason via \option{exemption-reason},|category=E|
% \DescribeKeyOption*{tax/exemption-reason=\meta{Text}}{initially empty}*
% \DescribeKeyOption*{tax/exemption-reason-code=\meta{exemption reason code}}{initially empty}*
% Add Reasons for a tax exempt, as required by |category=E|.
% This can either be added using a text (|exemption-reason|) or a predefined code (|exemption-reason-code|).
% The codes are listed at \cite{VAT-exemption-codes}.
% \item[reverse-charge] Reverse Charge
% \item[intra-community \textnormal{or} EEA] Intra-Community Supply, |category=K|
% \item[export] Free export item, tax not charged, |category=G|
% \item[O] Services outside scope of tax
% \item[canary-islands] Canary Islands general indirect tax, |category=L|
% \item[ceuta \textnormal{or} melilla] Ceuta and Melilla, |category=M|
% \end{valuelist}
%
% \DescribeKeyOption*{tax/rate=\meta{floating point}}{19}
% The value given will be used for tax calculation.
%
% By default it's configured to |19| to match the German standard VAT rate.
% \end{documentation}
% \begin{implementation}
% \begin{optionenv}{category, exemption-reason,rate}
%    \begin{macrocode}
\keys_define:nn { zugferd / tax } {
	 category .choices:nn = {S,Z,E,AE,K,G,O,L,M} {
		\tl_set_eq:NN \l_@@_tax_category_code_tl \l_keys_choice_tl
	},
	standard .meta:n = {category=S},
	zero .meta:n = {category=Z},
	exempt .meta:n = {category=E},
	reverse-charge .meta:n = {category=AE},
	intra-community .meta:n = {category=K},
	EEA .meta:n = {category=K},
	export .meta:n = {category=G},
	canary-islands .meta:n = {category=L},
	ceuta .meta:n = {category=M},
	melilla .meta:n = {category=M},
	category / unknown .code:n = {
		\exp_args:Nnnx \keys_if_choice_exist:nnnTF {zugferd} {category} {\str_uppercase:f {#1}}
		{\keys_set:nx { zugferd } {category= {\str_uppercase:f {#1}}}}
		{\msg_warning:nnn { zugferd } {unknown-tax-category} {#1}}
	},
	category .initial:n =  S,
	category .usage:n = general,
	exemption-reason .tl_set:N = \l_@@_tax_exemption_reason_tl,
	exemption-reason  .initial:V = \c_empty_tl,
	exemption-reason .usage:n = general,
	exemption-reason-code .tl_set:N  = \l_@@_tax_exemption_code_tl,
	exemption-reason-code  .initial:V = \c_empty_tl,
	exemption-reason .usage:n = general,
	rate .fp_set:N =  \l_@@_tax_rate_fp,
	rate .initial:n = 19,
	rate .usage:n = general,
}
\msg_new:nnnn {zugferd} {unknown-tax-category} {
	You~selected~an~unknown~tax~category.\\
	I~~will~directly~use~your~selection~'category=#1'~as~Code.\\
	Please~ensure~the~selection~is~valid!
} {
	For~more~information~see~the~zugferd~documentation and the corresponding code list.
}
%    \end{macrocode}
% \end{optionenv}
% \end{implementation}
% \begin{implementation}
% \begin{variable}{\g_@@_notes_seq,\g_@@_id_tl,\g_@@_date_tl,\g_@@_subject_tl,\g_@@_fromaddress_tl,\g_@@_DocumentTypeCode_tl}
%    \begin{macrocode}
\seq_new:N \g_@@_notes_seq
%    \end{macrocode}
%    \begin{macrocode}
\tl_new:N \g_@@_id_tl
%    \end{macrocode}
%    \begin{macrocode}
\tl_new:N \g_@@_date_tl
%    \end{macrocode}
%    \begin{macrocode}
\tl_new:N \g_@@_subject_tl
%    \end{macrocode}
%    \begin{macrocode}
\tl_new:N \g_@@_fromaddress_tl
%    \end{macrocode}
%    \begin{macrocode}
\tl_new:N \g_@@_DocumentTypeCode_tl
%    \end{macrocode}
% \end{variable}
%    \begin{macrocode}
\keys_define:nn { zugferd } {
	id .choice:,
	id / komavar .code:n = \tl_gset:Nf \g_@@_id_tl {\scr@invoice@var},
	id / unknown .code:n = \tl_gset:Nn \g_@@_id_tl {#1},
	%TODO define others
	document-type .choice:,
	document-type / commercial-invoice .code:n =
		\tl_gset:Nn \g_@@_DocumentTypeCode_tl {380},
	document-type .initial:n = commercial-invoice,
	date .choice:,
	date / auto .code:n = \tl_gset:Nn \g_@@_date_tl {
		\the\year\int_compare:nNnT {\month} < {10}  {0} \the\month\int_compare:nNnT {\day} < {10} {0}\the\day
	},
	date / unknown .code:n = \tl_gset:Nn  \g_@@_date_tl  {#1},
	delivery-date .choice:,
	delivery-date / auto .code:n = \tl_gset:Nn \g_@@_delivery_date_tl {
		\the\year\int_compare:nNnT {\month} < {10}  {0} \the\month\int_compare:nNnT {\day} < {10} {0}\the\day
	},
	delivery-date / unknown .code:n = \tl_gset:Nn  \g_@@_delivery_date_tl  {#1},
	subject .choice:,
	subject / komavar .code:n = \tl_gset:Nf \g_@@_subject_tl {\scr@subject@var},
	subject /unknown .code:n  = \tl_gset:Nn  \g_@@_subject_tl {#1},
	fromaddress .choice:,
	fromaddress / komavar .code:n = \tl_gset:Nf \g_@@_fromaddress_tl
		{\scr@fromaddress@var},
	fromaddress / unknown .code:n = \tl_gset:Nn \g_@@_fromaddress_tl {#1},
	add-note .code:n = \seq_gput_right:Nn \g_@@_notes_seq {#1},
}
%    \end{macrocode}
%    \begin{macrocode}
\cs_new:Nn  \_@@_note_if_not_empty:N {%
	\tl_if_empty:NF #1 {%
		\_@@_write_note:n {#1}%
	}%
}%
%    \end{macrocode}
% Setting up the catcodes to simplify the xml indentation.
% \iffalse
%    \begin{macrocode}
\cctab_new:N  \g_@@_xml_cctab
\begingroup% start of xml content - need to ensure to comment all line endings except those written to xml
\endlinechar=13%
\char_set_catcode:nn {13}{13}%
\cctab_gsave_current:N \g_@@_xml_cctab%
\endgroup
%    \end{macrocode}
% \fi
%    \begin{macrocode}
% start of xml content - need to ensure to comment all line endings except those written to xml
\cctab_begin:N  \g_@@_xml_cctab%
%
\_@@_define_xml_writing_macro:Nn \_@@_write_note:n {%
	\begingroup%
		\let\\\iow_newline:%
		\_@@_write_xml:e {%
			<ram:IncludedNote>
				\_@@_xml_indent:<ram:Content>#1
				\_@@_xml_indent:</ram:Content>
			</ram:IncludedNote>%
		}%
	\endgroup%
}%
%
%
\begingroup%
\char_set_catcode_other:N \#%
\char_set_catcode:nn {32}{10}%
\_@@_define_xml_writing_macro:Nn \_@@_insert_Header:{%
	\_@@_write_xml:e {%
		<?xml version='1.0' encoding='UTF-8' ?>
		<rsm:CrossIndustryInvoice xmlns:rsm="urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100" xmlns:qdt="urn:un:unece:uncefact:data:standard:QualifiedDataType:100" xmlns:ram="urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:udt="urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100">%
	}%
	\int_incr:N \l_@@_xml_indent_int%
	\_@@_write_xml:n {<rsm:ExchangedDocumentContext>}%
	\int_incr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {%
		\str_if_empty:NF \g_@@_businessProcessId_str {%
			<ram:BusinessProcessSpecifiedDocumentContextParameter>
			\_@@_xml_indent:<ram:ID>\g_@@_businessProcessId_str</ram:ID>
			</ram:BusinessProcessSpecifiedDocumentContextParameter>
		}%
		<ram:GuidelineSpecifiedDocumentContextParameter>
		\_@@_xml_indent:<ram:ID>\g_@@_format_str</ram:ID>
		</ram:GuidelineSpecifiedDocumentContextParameter>%
	}%
	\_@@_write_xml:n {</rsm:ExchangedDocumentContext>}%
}%
\endgroup%
\_@@_define_xml_writing_macro:Nn \_@@_insert_FrontMatter: {%
	\_@@_write_xml:n {<rsm:ExchangedDocument>}%
	\int_incr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {%
		<ram:ID>\g_@@_id_tl</ram:ID>
		<ram:TypeCode>\g_@@_DocumentTypeCode_tl</ram:TypeCode>
		<ram:IssueDateTime>
			% space required!
			<udt:DateTimeString~format="102">\g_@@_date_tl</udt:DateTimeString>
		</ram:IssueDateTime>%
	}%
	\_@@_note_if_not_empty:N  \g_@@_subject_tl%
	\_@@_note_if_not_empty:N \g_@@_fromaddress_tl%
	\seq_map_inline:Nn \g_@@_notes_seq {%
		\_@@_write_note:n {##1}%
	}%
	\int_decr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {%
		</rsm:ExchangedDocument>
		<rsm:SupplyChainTradeTransaction>%
	}%
	\int_incr:N \l_@@_xml_indent_int%
 }%
 %
 % footer
\_@@_define_xml_writing_macro:Nn \_@@_insert_Footer: {%
	 \_@@_write_xml:n {</rsm:SupplyChainTradeTransaction>}%
	 \int_decr:N \l_@@_xml_indent_int%
	 \_@@_write_xml:n {</rsm:CrossIndustryInvoice>}%
 }%
\cctab_end:
%    \end{macrocode}
% Each item consists of 5 parts:
% \begin{itemize}
% \item AssociatedDocumentLineDocument
%\item SpecifiedTradeProduct
%\item SpecifiedLineTradeAgreement
%\item SpecifiedLineTradeDelivery
%\item SpecifiedLineTradeSettlement
%\end{itemize}
%    \begin{macrocode}
%\begingroup
% start of xml content - need to ensure to comment all line endings except those written to xml
\cctab_begin:N  \g_@@_xml_cctab%
% AssociatedDocumentLineDocument
\_@@_define_xml_writing_macro:Nn \_@@_AssociatedDocumentLineDocument:n {%
		<ram:AssociatedDocumentLineDocument>
		\_@@_xml_indent: <ram:LineID>#1</ram:LineID>
		</ram:AssociatedDocumentLineDocument>%
}%
%
%
% SpecifiedTradeProduct
\_@@_define_xml_writing_macro:Nn \_@@_SpecifiedTradeProduct:nn {%
		<ram:SpecifiedTradeProduct>
		\tl_if_empty:nF {#1} {%
			\_@@_xml_indent:<ram:SellerAssignedID>#1</ram:SellerAssignedID>
		}%
		\_@@_xml_indent:<ram:Name>#2</ram:Name>
		</ram:SpecifiedTradeProduct>%
}%
%
\_@@_define_xml_writing_macro:Nn \_@@_ProductTradePrice:nn {%
	<ram:\str_uppercase:n #1PriceProductTradePrice>
	\_@@_xml_indent:<ram:ChargeAmount>#2</ram:ChargeAmount>
	</ram:\str_uppercase:n #1PriceProductTradePrice>%
}%
%
\_@@_define_xml_writing_macro:Nn \_@@_SpecifiedLineTradeAgreement:nn {%
					<ram:SpecifiedLineTradeAgreement>
						<ram:GrossPriceProductTradePrice>
							<ram:ChargeAmount>#1</ram:ChargeAmount>
						</ram:GrossPriceProductTradePrice>
						<ram:NetPriceProductTradePrice>
							<ram:ChargeAmount>#1</ram:ChargeAmount>
						</ram:NetPriceProductTradePrice>
					</ram:SpecifiedLineTradeAgreement>
}%
%
% SpecifiedLineTradeDelivery:nn <unit code > <number>
\_@@_define_xml_writing_macro:Nn \_@@_SpecifiedLineTradeDelivery:nn {%
	<ram:SpecifiedLineTradeDelivery>
	% SPACE!
	\_@@_xml_indent:<ram:BilledQuantity~unitCode="#1">#2</ram:BilledQuantity>
	</ram:SpecifiedLineTradeDelivery>%
}%
%
% SpecifiedLineTradeSettlement
\_@@_define_xml_content_macro:Nn  \_@@_SpecifiedLineTradeSettlement:nnn {%
		<ram:SpecifiedLineTradeSettlement>
		\_@@_xml_indent:<ram:ApplicableTradeTax>
		%BT-151
		\_@@_xml_indent:\_@@_xml_indent:<ram:TypeCode>VAT</ram:TypeCode>
		%BT-151
		\_@@_xml_indent:\_@@_xml_indent:<ram:CategoryCode>#1</ram:CategoryCode>
		%BT-152
		\_@@_xml_indent:\_@@_xml_indent:<ram:RateApplicablePercent>#2</ram:RateApplicablePercent>
		\_@@_xml_indent:</ram:ApplicableTradeTax>
		\_@@_xml_indent:<ram:SpecifiedTradeSettlementLineMonetarySummation>
		% BT-131
		\_@@_xml_indent:\_@@_xml_indent:<ram:LineTotalAmount>#3</ram:LineTotalAmount>
		\_@@_xml_indent:</ram:SpecifiedTradeSettlementLineMonetarySummation>
		</ram:SpecifiedLineTradeSettlement>%
}%
\cctab_end:
\cs_generate_variant:Nn \_@@_SpecifiedLineTradeSettlement:nnn {Vnn}
%    \end{macrocode}
% The exemption reason was placed wrong with the pre-CTAN release.
% This was fixed in August 2024.
% The old macro will be kept for a bit longer but will be removed soon.
% Please update your own implementatios accordingly.
%    \begin{macrocode}
\cs_new:Nn\_@@_SpecifiedLineTradeSettlement:nnnn {
	\msg_warning:nnnn {zugferd} {macro-deprecated}
		{ \_@@_SpecifiedLineTradeSettlement:nnnn }
		{ \_@@_SpecifiedLineTradeSettlement:nnn }
	\_@@_SpecifiedLineTradeSettlement:nnn {#2} {#3} {#4}
}
\cs_generate_variant:Nn \_@@_SpecifiedLineTradeSettlement:nnnn {VVnn}

% position nummer name einzel-preis anzahl gesamtpreis
\_@@_define_xml_writing_macro:Nn \_@@_insert_TradeLineItem:nnnnnn {
	\_@@_write_xml:n {<ram:IncludedSupplyChainTradeLineItem>}
	\int_incr:N  \l_@@_xml_indent_int
	\_@@_write_xml:e {\_@@_AssociatedDocumentLineDocument:n {#1}}%

	\begingroup
	\zugferd_disable_macros:
	\_@@_write_xml:e {\_@@_SpecifiedTradeProduct:nn {#2} {#3}}
	\endgroup

	\_@@_write_xml:n {<ram:SpecifiedLineTradeAgreement>}
	\int_incr:N  \l_@@_xml_indent_int%
	\_@@_write_xml:e {\_@@_ProductTradePrice:nn {net} {#4}}
	\int_decr:N  \l_@@_xml_indent_int%
	\_@@_write_xml:n {</ram:SpecifiedLineTradeAgreement>}
	\_@@_write_xml:e {\_@@_SpecifiedLineTradeDelivery:nn { \l_@@_unit_code_tl } {#5}}
	\_@@_write_xml:e {\_@@_SpecifiedLineTradeSettlement:Vnn \l_@@_tax_category_code_tl  { \fp_use:N \l_@@_tax_rate_fp} {#6} }
	\int_decr:N  \l_@@_xml_indent_int
	\_@@_write_xml:n {</ram:IncludedSupplyChainTradeLineItem>}
}
%    \end{macrocode}
% ApplicableHeaderTradeAgreement
%
% Contains information on seller and buyer trade party:
% \begin{itemize}
% \item  BuyerReference
% \item SellerTradeParty
% \item BuyerTradeParty
% \end{itemize}
% Seller and Buyer are specified the same way.
%    \begin{macrocode}
%\begingroup
\keys_define:nn {zugferd/buyer} {
	reference .tl_gset:N = \g_@@_buyer_reference_tl,
}

\clist_map_inline:nn {seller,buyer} {
	\prop_new:c {g_@@_#1_AddressData_prop}
	\keys_define:nn {zugferd / #1} {
		address .code:n = {
			\seq_set_split:Nnn \l_tmpa_seq {\\} {##1}
			%TODO error if more than 2 lines or only 1
			\keys_set:nx {zugferd / #1} {lineone=\seq_item:Nn \l_tmpa_seq {1},linetwo=\seq_item:Nn \l_tmpa_seq {2}}
		},
		unknown .code:n = \tl_if_blank:nF {##1} { \prop_gput:cVe {g_@@_#1_AddressData_prop} \l_keys_key_tl {\tl_trim_spaces:n {##1}}}
	}
}

\keys_define:nn {zugferd/seller} {
	contact .code:n = {
		\seq_set_split:Nnn \l_tmpa_seq {\\} {#1}
		\int_compare:nNnTF {\seq_count:N \l_tmpa_seq} > {3}
			{
				\keys_set:ne {zugferd/seller} {
					contact-name = \seq_item:Nn \l_tmpa_seq {1},
					contact-department = \seq_item:Nn \l_tmpa_seq {2},
					contact-phone = \seq_item:Nn \l_tmpa_seq {3},
					contact-email= \seq_item:Nn \l_tmpa_seq {4}
				}
			}{
				\keys_set:ne {zugferd/seller} {
					contact-name = \seq_item:Nn \l_tmpa_seq {1},
					contact-phone = \seq_item:Nn \l_tmpa_seq {2},
					contact-email= \seq_item:Nn \l_tmpa_seq {3}
				}
			}
	}
}

%\_@@_PostalTradeAddress:nnnnnn Name/Firma PLZ Zeile1 Zeile2 Ort Ländercode Email UID
\cs_new:Nn \_@@_PostalTradeAddress:N {%
	\_@@_PostalTradeAddress:eeeeeee
		{\prop_item:Nn #1 {postcode}}
		{\prop_item:Nn #1 {lineone}}
		{\prop_item:Nn #1 {linetwo}}
		{\prop_item:Nn #1 {city}}
		{\prop_item:Nn #1 {country}}
		{\prop_item:Nn #1 {email}}
		{\prop_item:Nn #1 {vatid}}
}%
%
% Contact data phone/email to a specific contact person
\cs_new:Nn \_@@_DefinedTradeContact:N {%
	\_@@_DefinedTradeContact:eeee
		{\prop_item:Nn #1 {contact-name}}
		{\prop_item:Nn #1 {contact-department}}
		{\prop_item:Nn #1 {contact-phone}}
		{\prop_item:Nn #1 {contact-email}}
}%
%
% start of xml content - need to ensure to comment all line endings except those written to xml
\cctab_begin:N  \g_@@_xml_cctab%
%\_@@_PostalTradeAddress:nnnnnnn Name/Firma PLZ Zeile1 Zeile2 Ort Ländercode Email UID
\_@@_define_xml_content_macro:Nn \_@@_PostalTradeAddress:nnnnnnn {%
        <ram:PostalTradeAddress>
         \_@@_xml_indent:<ram:PostcodeCode>#1</ram:PostcodeCode>
         \_@@_xml_indent:<ram:LineOne>#2</ram:LineOne>
         \tl_if_empty:nF {#3} {%
		\_@@_xml_indent:<ram:LineTwo>#3</ram:LineTwo>
         }%
         \_@@_xml_indent:<ram:CityName>#4</ram:CityName>
         \_@@_xml_indent:<ram:CountryID>#5</ram:CountryID>
        </ram:PostalTradeAddress>%
        \tl_if_empty:nF {#6} {%
		<ram:URIUniversalCommunication>
		\_@@_xml_indent:<ram:URIID~schemeID="EM">#6</ram:URIID>
		</ram:URIUniversalCommunication>%
        }%
% TODO add support local tax id: schemaID="FC"
        \tl_if_empty:nF {#7} {
	        <ram:SpecifiedTaxRegistration>
	        \_@@_xml_indent:<ram:ID~schemeID="VA">#7</ram:ID>
	        </ram:SpecifiedTaxRegistration>%
        }%
}%
%
% Contact data phone/email to a specific contact person
\_@@_define_xml_content_macro:Nn  \_@@_DefinedTradeContact:nnnn {%
\bool_if:NTF  \g_@@_writeTradeContact_bool {%
	<ram:DefinedTradeContact>
	\_@@_xml_indent:<ram:PersonName>#1</ram:PersonName>
	\tl_if_blank:nF {#2} {%
	\_@@_xml_indent:<ram:DepartmentName>#2</ram:DepartmentName>
	}%
	\tl_if_blank:nF {#3} {%
	\_@@_xml_indent:<ram:TelephoneUniversalCommunication>
	\_@@_xml_indent:\_@@_xml_indent:<ram:CompleteNumber>#3</ram:CompleteNumber>
	\_@@_xml_indent:</ram:TelephoneUniversalCommunication>
	}%
	\tl_if_blank:nF {#4} {%
	\_@@_xml_indent:<ram:EmailURIUniversalCommunication>
	\_@@_xml_indent:\_@@_xml_indent:<ram:URIID>#4</ram:URIID>
	\_@@_xml_indent:</ram:EmailURIUniversalCommunication>
	}%
	</ram:DefinedTradeContact>%
	}{\use_none:n}%
}%
%
%
%
\_@@_define_xml_writing_macro:Nn \_@@_ApplicableHeaderTradeAgreement: {%
	\_@@_write_xml:n {<ram:ApplicableHeaderTradeAgreement>}%
	\int_incr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {%
		<ram:BuyerReference>\g_@@_buyer_reference_tl</ram:BuyerReference>
		<ram:SellerTradeParty>%
	}%
	\int_incr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {%
		<ram:Name>\prop_item:Nn \g_@@_seller_AddressData_prop {name}</ram:Name>
		% Trade Contract
			\_@@_DefinedTradeContact:N \g_@@_seller_AddressData_prop
			\_@@_PostalTradeAddress:N  \g_@@_seller_AddressData_prop
		</ram:SellerTradeParty>
		<ram:BuyerTradeParty>
			<ram:Name>\prop_item:Nn \g_@@_buyer_AddressData_prop {name}</ram:Name>
			\_@@_PostalTradeAddress:N  \g_@@_buyer_AddressData_prop
		</ram:BuyerTradeParty>%
	}%
	\int_decr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {%
		</ram:ApplicableHeaderTradeAgreement>
		\_@@_ApplicableHeaderTradeDelivery:n { \g_@@_delivery_date_tl }%
	}%
}%
%
%
% delivery date
\_@@_define_xml_content_macro:Nn \_@@_ApplicableHeaderTradeDelivery:n {%
	<ram:ApplicableHeaderTradeDelivery>
		\_@@_xml_indent:<ram:ActualDeliverySupplyChainEvent>
			\_@@_xml_indent:\_@@_xml_indent:<ram:OccurrenceDateTime>
				\_@@_xml_indent:\_@@_xml_indent:\_@@_xml_indent:<udt:DateTimeString~format="102">#1</udt:DateTimeString>
			\_@@_xml_indent:\_@@_xml_indent: </ram:OccurrenceDateTime>
		\_@@_xml_indent:</ram:ActualDeliverySupplyChainEvent>
	</ram:ApplicableHeaderTradeDelivery>%
}%
%
\cctab_end:
\cs_generate_variant:Nn  \_@@_DefinedTradeContact:nnnn {eeee}%
\cs_generate_variant:Nn  \_@@_PostalTradeAddress:nnnnnnn {eeeeeee}%
%    \end{macrocode}
% ApplicableHeaderTradeSettlement
%    \begin{macrocode}
%\begingroup
% %    \end{macrocode}
% \begin{variable}{\l_@@_currency_tl}
%    \begin{macrocode}
\tl_new:N \l_@@_currency_tl
%    \end{macrocode}
% \end{variable}
% \begin{variable}{\l_@@_payment_means_tl}
%    \begin{macrocode}
\tl_new:N \l_@@_payment_means_tl
%    \end{macrocode}
% \end{variable}
%    \begin{macrocode}
\keys_define:nn {zugferd} {
	currency .choices:nn = {EUR, USD, CHF} { \tl_set_eq:NN  \l_@@_currency_tl \l_keys_choice_tl	},
	currency / € .meta:n = {currency = EUR},
	% add support for all currencies/make case-insensitive/unknown
	payment-terms .str_gset:N = \_@@_payment_terms_str,
	payment-terms .initial:n =,
	due-date .tl_gset:N = \_@@_due_date_tl,
	due-date .initial:n =,
	payment-means / type .choices:nn = {10,20,30,42,48,49,57,58,59,97} {\tl_set_eq:NN \l_@@_payment_means_tl \l_keys_choice_tl},
}

\clist_map_inline:nn {iban,account-holder,bic} {
	\keys_define:nn {zugferd/payment-means} {
		#1 .tl_gset:c = {g_@@_payment_#1_tl}
	}
}

\prop_new:c {g_@@_payment-means_names_prop}
\newcommand*{\setupZUGFeRDStrings}[2]{
	\prop_gset_from_keyval:cn {g_@@_#1_names_prop} {
		#2
	}
}

\ExplSyntaxOff
%TODO english
%    \end{macrocode}
% \end{implementation}
% \begin{documentation}
% \subsection{Payment Means}
% The payment means are selected by numeric codes.
% Currently we support:
% \begin{itemize}
% \UseName{exp_args:Nnnc} \UseName{exp_args:co} {clist_map_inline:nn} {zugferd@paymentMeans@english} {\item #1}
% \end{itemize}
% Others may be added in the future but it's not planned to include a full list.
%
% The codes will automatically add the corresponding string inside the \enquote{Information} field.
% The initial version only included German strings, but currently they are also included in English.
% It's possible to overwrite them using the same structure:
%
% \begin{verbatim}
% \setupZUGFeRDStrings{payment-means}{
%	10 = Bargeld,
%	58 = Zahlung per SEPA Überweisung.,
%	}
% \end{verbatim}
% The language selection is done using at hook executed at |\begin{document}|.
% Internally the commands are predefined as a key-value list like the argument in the example above.
% They macros are called \cs{zugferd@paymentMeans@\meta{languagename}}.
% Currently \pkg{zugferd} defines these for |english| and |german| (also |ngerman| as an compatibility alias).
% \end{documentation}
% \begin{implementation}
%    \begin{macrocode}
\providecommand*{\zugferd@paymentMeans@german}{
	  1 = Keine Zahlungsart definiert,
	10 = Bargeld,
	30 = Überweisung,
	42 = Zahlung an Bankkonto,
	48 = Kartenzahlung,
	49 = Lastschriftverfahren,
	57 = Dauerauftrag,
	58 = Zahlung per SEPA Überweisung.,
	59 = SEPA Lastschrift,
	97 = Ausgleich zwischen Partnern
}
\def\zugferd@paymentMeans@ngerman{\zugferd@paymentMeans@german}
\providecommand*{\zugferd@paymentMeans@english}{
	  1 = Instrument not defined,
	10 = In cash,
	30 = Credit Transfer,
	31 = Debit Transfer,
	42 = Payment to bank account,
	48 = Bank card,
	49 = Direct Debit,
	57 = Standing agreement,
	58 = SEPA credit transfer,
	59 = SEPA direct debit,
	97 = Clearing between partners
}
%    \end{macrocode}
%    \begin{macrocode}
\ExplSyntaxOn
\hook_gput_code:nnn {begindocument/end}{zugferd/payment-means}{
		\prop_if_empty:cT  {g_@@_payment-means_names_prop} {
				\exp_args:Nne \setupZUGFeRDStrings{payment-means}{
					\use:c {zugferd@paymentMeans@\cs_if_exist:cTF {zugferd@paymentMeans@\languagename} {\languagename} {english}}
				}
		}
}

% sums
\_@@_define_xml_writing_macro:Nn \_@@_SpecifiedTradeSettlementHeaderMonetarySummation:nnnnnnnn {%
	\_@@_write_xml:n {<ram:SpecifiedTradeSettlementHeaderMonetarySummation>}%
    \int_incr:N \l_@@_xml_indent_int%
    %TODO check if all need to be rounded to 2 decimals
    \_@@__write_xml_number_round:nnn {2} {LineTotalAmount} {#1}
    \_@@__write_xml_number_round:nnn {2} {ChargeTotalAmount} {#2}
    \_@@__write_xml_number_round:nnn {2} {AllowanceTotalAmount} {#3}
    \_@@__write_xml_number_round:nnn {2} {TaxBasisTotalAmount} {#4}
	\_@@__write_xml_number_round:nnnn {2} {TaxTotalAmount} {~currencyID="\l_@@_currency_tl "} {#5}
	\_@@__write_xml_number_round:nnn {2} {GrandTotalAmount} {#6}
	\_@@__write_xml_number_round:nnn {2} {TotalPrepaidAmount} {#7}
	\_@@__write_xml_number_round:nnn {2} {DuePayableAmount} {#8}
	\int_decr:N \l_@@_xml_indent_int%
	\_@@_write_xml:n {</ram:SpecifiedTradeSettlementHeaderMonetarySummation>}%
}%

% ApplicableTradeTax CategoryCode Rate BaseAmount Result
\_@@_define_xml_writing_macro:Nn \_@@_ApplicableTradeTax:nnnn {%
	\_@@_write_xml:n {<ram:ApplicableTradeTax>}
	\int_incr:N \l_@@_xml_indent_int%
		\_@@__write_xml_number_round:nnn {2} {CalculatedAmount} {#4}%BT117
		\_@@_write_xml:n {<ram:TypeCode>VAT</ram:TypeCode>}%BT118
		\tl_if_blank:VF \l_@@_tax_exemption_reason_tl {%BT-120
			\_@@_write_xml:e {<ram:ExemptionReason>
				\l_@@_tax_exemption_reason_tl
				</ram:ExemptionReason>}
		}
		{{\_@@__write_xml_number_round:nnn {2} {BasisAmount} {#3}}}%BT-116
		\_@@_write_xml:e {<ram:CategoryCode>#1</ram:CategoryCode>}%BT-118
		\tl_if_blank:VF \l_@@_tax_exemption_code_tl {%BT121
			\_@@_write_xml:e {<ram:ExemptionReasonCode>
				\l_@@_tax_exemption_code_tl
				</ram:ExemptionReasonCode>}
		}
		\_@@_write_xml:n {<ram:RateApplicablePercent>#2</ram:RateApplicablePercent>}%BT-119
	\int_decr:N \l_@@_xml_indent_int%
	\_@@_write_xml:n {</ram:ApplicableTradeTax>}
}%
%
\cctab_begin:N  \g_@@_xml_cctab%
% ApplicableHeaderTradeSettlement
\_@@_define_xml_writing_macro:Nn \_@@_ApplicableHeaderTradeSettlement:nnnnnnnn {%

}%
%
% ApplicableHeaderTradeSettlement Need to be splitted to be used in separate parts of the tabular
\_@@_define_xml_writing_macro:Nn \_@@_ApplicableHeaderTradeSettlement_start: {%
	\_@@_write_xml:n {<ram:ApplicableHeaderTradeSettlement>}%
	\int_incr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {<ram:InvoiceCurrencyCode>\l_@@_currency_tl</ram:InvoiceCurrencyCode>}%
}%
\_@@_define_xml_writing_macro:Nn \_@@_ApplicableHeaderTradeSettlement_stop: {%
	\int_decr:N \l_@@_xml_indent_int%
	  \_@@_write_xml:n {</ram:ApplicableHeaderTradeSettlement>}%
}%
% SpecifiedTradePaymentTerms
\_@@_define_xml_writing_macro:Nn \_@@_SpecifiedTradePaymentTerms:nn {%
	\_@@_write_xml:n {<ram:SpecifiedTradePaymentTerms>}%
	\int_incr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {%
		\tl_if_blank:nF {#1} {%
			<ram:Description>#1</ram:Description>%
		}%
		\tl_if_blank:nF {#2} {
			<ram:DueDateDateTime>
			\_@@_xml_indent:<udt:DateTimeString~format="102">#2</udt:DateTimeString>
			</ram:DueDateDateTime>%
		}%
	}%
	\int_decr:N \l_@@_xml_indent_int%
	\_@@_write_xml:n {</ram:SpecifiedTradePaymentTerms>}%
}%
%
%
% sums
\_@@_define_xml_writing_macro:Nn \_@@_SpecifiedTradeSettlementPaymentMeans:nnn {%
\bool_if:NT  \g_@@_writePaymentMeans_bool {%
	\_@@_write_xml:n {<ram:SpecifiedTradeSettlementPaymentMeans>}%
	\int_incr:N \l_@@_xml_indent_int%
	\_@@_write_xml:e {%
		<ram:TypeCode>\l_@@_payment_means_tl</ram:TypeCode>
		\prop_if_in:cVT {g_@@_payment-means_names_prop} \l_@@_payment_means_tl {%
			<ram:Information>\prop_item:cV {g_@@_payment-means_names_prop} \l_@@_payment_means_tl</ram:Information>
		}%
		<ram:PayeePartyCreditorFinancialAccount>
			\_@@_xml_indent:<ram:IBANID>#2</ram:IBANID>
			\_@@_xml_indent:<ram:AccountName>#1</ram:AccountName>
		</ram:PayeePartyCreditorFinancialAccount>
		<ram:PayeeSpecifiedCreditorFinancialInstitution>
			\_@@_xml_indent:<ram:BICID>#3</ram:BICID>
		</ram:PayeeSpecifiedCreditorFinancialInstitution>%
	}%
	\int_decr:N \l_@@_xml_indent_int%
	\_@@_write_xml:n {</ram:SpecifiedTradeSettlementPaymentMeans>}%
}%
}%
\cctab_end:
\cs_generate_variant:Nn \_@@_SpecifiedTradePaymentTerms:nn {VV}
\_@@_define_xml_writing_macro:Nn \_@@_SpecifiedTradePaymentTerms: {\_@@_SpecifiedTradePaymentTerms:VV \_@@_payment_terms_str \_@@_due_date_tl}
%    \end{macrocode}
% \begin{function}{\_@@_SpecifiedTradeSettlementPaymentMeans:}
%    \begin{macrocode}
\_@@_define_xml_writing_macro:Nn \_@@_SpecifiedTradeSettlementPaymentMeans: {
	\tl_if_empty:cF {g_@@_payment_account-holder_tl}  {
	\exp_args:Nccc \_@@_SpecifiedTradeSettlementPaymentMeans:nnn {g_@@_payment_account-holder_tl} {g_@@_payment_iban_tl}  {g_@@_payment_bic_tl}
	}
}
%    \end{macrocode}
% \end{function}
% \begin{function}{\zugferd_disable_macros:}
% The definition was mostly taken from \pkg{hyperref} \cite{hyperref}.
% Most likely not all of these are required, but it's probably easier to take this as a reasonable choice instead of creating an own collection.
% \iffalse
%    \begin{macrocode}
%% modified list taken from hyperref.sty  v7.01i
%% Copyright
%% 1995-2001 Sebastian Rahtz, with portions written by David Carlisle and Heiko Oberdiek
%% 2001-2015 Heiko Oberdiek
%% 2016-2019 Oberdiek Package Support Group
%% 2019-2024 LaTeX Project
%% modifications have been made to support the mechanism if hyperref is not loaded
%    \end{macrocode}
% \fi
%    \begin{macrocode}
\cs_new:Nn \zugferd_disable_macros: {
    \let\{\textbraceleft
    \let\}\textbraceright
    \let\\\textbackslash
    \let\#\textnumbersign
    \let\$\textdollar
%    \end{macrocode}
% This only is a part of the list.
% There is no real use of printing the whole list, it's inside zugferd.sty anyway.
% \comment
%    \begin{macrocode}
    \let\%\textpercent
    \let\&\textampersand
    \let\_\textunderscore
    \let\P\textparagraph
    \let\ldots\textellipsis
    \let\dots\textellipsis
    \def\\{\space}%
    \def\newline{\space}%
    \def\TeX{TeX}%
    \def\LaTeX{La\TeX}%
    \def\LaTeXe{\LaTeX2e}%
    \def\eTeX{e-\TeX}%
    \def\SliTeX{Sli\TeX}%
    \def\MF{Metafont}%
    \def\MP{Metapost}%
    \let\fontencoding\@gobble
    \let\fontfamily\@gobble
    \let\fontseries\@gobble
    \let\fontshape\@gobble
    \let\fontsize\@gobbletwo
    \let\selectfont\@empty
    \let\usefont\@gobblefour
    \let\emph\@firstofone
    \let\textnormal\@firstofone
    \let\textrm\@firstofone
    \let\textsf\@firstofone
    \let\texttt\@firstofone
    \let\textbf\@firstofone
    \let\textmd\@firstofone
    \let\textit\@firstofone
    \let\textsc\@firstofone
    \let\textsl\@firstofone
    \let\textup\@firstofone
    \let\normalfont\@empty
    \let\rmfamily\@empty
    \let\sffamily\@empty
    \let\ttfamily\@empty
    \let\bfseries\@empty
    \let\mdseries\@empty
    \let\itshape\@empty
    \let\scshape\@empty
    \let\slshape\@empty
    \let\upshape\@empty
    \let\em\@empty
    \let\rm\@empty
    \let\Huge\@empty
    \let\LARGE\@empty
    \let\Large\@empty
    \let\footnotesize\@empty
    \let\huge\@empty
    \let\large\@empty
    \let\normalsize\@empty
    \let\scriptsize\@empty
    \let\small\@empty
    \let\tiny\@empty
    \let\mathversion\@gobble
    \let\phantom\@gobble
    \let\vphantom\@gobble
    \let\hphantom\@gobble
    \let\ding\HyPsd@ding
    \let\Cube\HyPsd@DieFace
    \def\begin##1{\csname##1\endcsname}%
    \def\end##1{\csname end##1\endcsname}%
    \def\textcolor##1##{\@secondoftwo}%
   \def\TextOrMath{\ifmmode\expandafter\@secondoftwo\else\expandafter\@firstoftwo\fi}%
    \let\foreignlanguage\@secondoftwo
    \let\textlatin\@firstofone
    \let\cyr\relax
    \let\glqq\textglqq
    \let\grqq\textgrqq
    \let\glq\textglq
    \let\grq\textgrq
    \let\flqq\textflqq
    \let\frqq\textfrqq
    \let\flq\textflq
    \let\frq\textfrq
    \let\if@mid@expandable\@firstoftwo
    \let\hspace\@gobble
    \let\label\@gobble
    \let\index\@gobble
    \let\glossary\@gobble
    \let\@mkboth\@gobbletwo
    \let\leavevmode\@empty
    \let\mbox\@empty
    \def\halign{\@gobble}%
	\let\Hy@SectionAnchorHref\@gobble
    \@ifpackageloaded{hyperref} {
    \let\ref\HyPsd@ref
    \let\href\HyPsd@href
    \let\pageref\HyPsd@pageref
    \let\nameref\HyPsd@nameref
    \let\autoref\HyPsd@autoref
    \let\ignorespaces\HyPsd@ignorespaces
    } {
        \let\ref\@gobble
        \let\href\@gobble
        \let\pageref\@gobble
        \let\nameref\@gobble
        \let\autoref\@gobble
        \let\ignorespaces\relax
    }
    \let\ensuremath\@firstofone
    \hook_use:n {zugferd/disable-macros}
%    \end{macrocode}
% \endcomment
%    \begin{macrocode}
}
%    \end{macrocode}
% To provide a possibility to extend or overwrite the macro list a hook is added.
%    \begin{macrocode}
\hook_new:n {zugferd/disable-macros}
%    \end{macrocode}
% \end{function}
% \end{implementation}
% \begin{implementation}
%    \begin{macrocode}
\msg_new:nnn {zugferd} {macro-deprecated} {
	The~function~#1~is~deprecated.\\
	It~was~replaced~by~#2.\\
	Please~adjust~your~mechanism~to~use~the~new~version.
}
%    \end{macrocode}
% \end{implementation}
% \iffalse
%    \begin{macrocode}
%</package>
%    \end{macrocode}
% \fi
% \Finale
\endinput
